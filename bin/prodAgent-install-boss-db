#!/usr/bin/env python
"""
_prodAgent-install-boss-db_

Installation and configuration script for prod agent boss database.

"""

__revision__ = "$Id: prodAgent-install-boss-db,v 1.6 2006/05/16 17:12:13 fvlingen Exp $"

import getpass
import os
import sys

from ProdAgentCore.Configuration import ProdAgentConfiguration
from ProdAgentDB.Install import adminLogin 
from ProdAgentDB.Install import installDB
from ProdAgentDB.Install import preInstall

bossPath=os.environ.get('BOSS_ROOT')
if bossPath==None:
   print('BOSSPATH variable is not set')
   sys.exit(1)

path=os.environ.get('PATH')
exists=path.find(bossPath)
if(exists==-1):
   print('BOSSPATH not part of PATH')
   sys.exit(1)

# start the install db process:
valid = ['config=','help']
# check the input
config=preInstall(valid)
# load config file
cfgObject = ProdAgentConfiguration()
cfgObject.loadFromFile(config)
# extract the information
dbConfig = cfgObject.get("BOSS")
if os.path.isdir(dbConfig['configDir']) == 0 :
   os.makedirs(dbConfig['configDir'])
if os.path.isdir(dbConfig['tmpDir']) == 0 :
   os.makedirs(dbConfig['tmpDir'])

# just an idea: this url can be already used!
#dbConfig['monaLisaUrl'] = "http://lxgate35.cern.ch:40808/ApMonConf"

print    
print 'Writing BOSS config files in : '+dbConfig['configDir']
print    
#overwrite clad files with prod agent defaults.
print
print 'Creating BossConfig.clad'
print

bossConfig=open(dbConfig['configDir']+'/BossConfig.clad','w')

bossStr="""
# This is the BOSS configuration file

# *************Generated by ProdAgent*************
[
# BOSS temporary directory (where files are extracted from DB)
BOSS_TMP_DIR = "%s";

# BOSS update interval
BOSS_MIN_UPD_INT = %s;   # at most one update every BOSS_MIN_UPD_INT sec.
BOSS_MAX_UPD_INT = %s;  # at least one update every BOSS_MAX_UPD_INT sec.

# Maximum retries after post-process finishes before killing RTUpdator
# (waits BOSS_UPD_INTERVAL*BOSS_MAX_RETRY seconds)
BOSS_MAX_RETRY = %s;

# Boss Database Backend
DB_BACKEND = "MySQL";

# Info sent also to Monalisa (if empty not enabled)
ML_URL = "%s";
]
""" % (dbConfig['tmpDir'],dbConfig['minUpdInt'],dbConfig['maxUpdInt'],\
    dbConfig['maxRetry'],dbConfig['monaLisaUrl'])
bossConfig.write(bossStr)
bossConfig.close()

print
print 'Creating MySQLConfig.clad'
print

bossMysql=open(dbConfig['configDir']+'/MySQLConfig.clad','w')
bossStr="""

# This is the BOSS MySQL Database configuration file
# *************Generated by ProdAgent*************

[
# BOSS MySQL database file
DB_NAME = "%s";

# Host where the MySQL server is running
DB_HOST = "%s";
DB_DOMAIN = "%s";

# Default BOSS MySQL user and password
DB_USER = "%s";
DB_USER_PW = "%s";

# Guest BOSS MySQL user and password
DB_GUEST = "%s";
DB_GUEST_PW = "%s";

# MySQL table type
TABLE_TYPE = "";

# MySQL port
DB_PORT = %s;

# MySQL socket
DB_SOCKET = "%s";

# MySQL client flag
DB_CLIENT_FLAG = 0;
]
""" %(dbConfig['dbName'],dbConfig['host'],dbConfig['domain'],dbConfig['user'],dbConfig['passwd'],dbConfig['guestUser'],dbConfig['guestPasswd'],dbConfig['portNr'],dbConfig['socketFileLocation'])
bossMysql.write(bossStr)
bossMysql.close()


# after modifying the clad files we can generate the schema with the boss
# command.

y=''
try:
   stdin,stdout=os.popen4('bossAdmin configureDB -c ' + dbConfig['configDir'])
   lines=stdout.readlines()
   for line in lines:
      if "mysql -u root" in line :
         schemaLocation=line[line.find('MySQL'):]
         break
   y=stdout.read()
   if y!='':
      raise Exception("ERROR",str(y))
except Exception,ex:
   print('*****Ignore this for the moment: '+str(ex[1]))
   print('*****End Ignore')

# once we generate the schema we can install the database
#schemaLocation=dbConfig['schemaLocation']
# boss creates the file in the same dir???
#schemaLocation='MySQLConfig.sql'
dbName=dbConfig['dbName']

print "schemaLocation for ",dbName,": ",schemaLocation

# ask for password (optional)
userName,passwd=adminLogin()

users={dbConfig['user']:dbConfig['passwd'],
       dbConfig['guestUser']:dbConfig['passwd']}

installUser={'userName':userName,
             'passwd':passwd}
# install the database
installDB(schemaLocation,dbName,dbConfig['socketFileLocation'],dbConfig['portNr'],dbConfig['host'],users,installUser)

# clad files and database have been installed. Register schedulers.
# NOTE: if scheduler install script names change we need to change too.
# NOTE: perhaps put this in the config.xml file?

schedulers=['registerBBSScheduler', 'registerPBSScheduler', \
            'registerCondorScheduler', \
#            'registerCONDOR_GScheduler', \
            'registerLSF-NoSharedFS-Scheduler', \
            'registerLSF-SharedFS-Scheduler', \
            'registerLSF-SharedFS-CERN-Scheduler', \
            'registerEDGScheduler','registerGLITEScheduler', \
            'registerGliteAPICollectionScheduler', \
            'registerGliteAPIParamScheduler', \
            'registerForkScheduler']

print
print('Registering schedulers:')
print
y=''
for scheduler in schedulers:
   try:
      # ok: it doesn't look nice but, for the moment, the only way
      # to understand which ones are the latest working scripts for a given
      # scheduler, is to read them from our registerSCHEDScheduler
      file=open(bossPath + "/BossSched/bin/" + scheduler,"r")
      lines=file.readlines();
      file.close();
      for line in lines:
         if "bossAdmin" in line :
            cmd = line.strip() + ' -c ' + dbConfig['configDir']
            break
      if len(cmd) == 0 :
         continue
      print('Registering '+scheduler.lstrip('register'))
      cmd = 'cd '+bossPath+'/BossSched/bin/;' + cmd
      stdin,stdout=os.popen4(cmd)
      # this is for dealing with questions on replacing
      # the scheduler (this might be easier when the Python API of
      # boss is available
      stdin.write('y')
      stdin.close()
      y=str(stdout.read())
      y=str(stdout.read())
      stdout.close()
      if y!='':
         raise
   except Exception,ex:
      print('ERROR: '+str(ex)+'  '+str(y)+'\Perhaps this user '+\
            'has not the right privileges for boss or the database?')


list=''
try:
   cmd='boss showSchedulers -c ' + dbConfig['configDir']
   stdin,stdout=os.popen4(cmd)
   while 1:
       y=stdout.readline()
       if not y:
           stdout.close()
           break
       list+=y
except Exception,ex:
   print('ERROR '+str(ex))


print('The following schedulers where registered:\n'+list)

raw_input("Press any key to continue installing the BOSS RT MON DB ")

y=''
print
print 'Creating MySQLRTConfig.clad'
print

bossConfig=open(dbConfig['configDir']+'/MySQLRTConfig.clad','w')
print("\nCreating MySQLRTConfig.clad")

# about dbConfig['dbName']:
# the database name for the RT server should be different from the BOSS client one:
# in principle the server itself should be different!
# I just add a '_rt' for the moment
dbName=dbConfig['dbName']+'_rt'

bossStr="""
# This is the BOSS MySQL Database configuration file
#***********Generated by prodagent****************
[
# BOSS MySQL database file
DB_NAME = "%s";

# Host where the MySQL server is running
DB_HOST = "%s";
DB_DOMAIN = "%s";

# Default BOSS MySQL user and password
DB_USER = "%s";
DB_USER_PW = "%s";

# Guest BOSS MySQL user and password
DB_GUEST = "%s";
DB_GUEST_PW = "%s";

# MySQL table type
TABLE_TYPE = "";

# MySQL port
DB_PORT = %s;

# MySQL socket
DB_SOCKET = "%s";

# MySQL client flag
DB_CLIENT_FLAG = 0;

# MySQL timeout in seconds
DB_CONNECT_TIMEOUT = 30;
]
""" %(dbName,dbConfig['host'],dbConfig['domain'],dbConfig['user'],dbConfig['passwd'],dbConfig['guestUser'],dbConfig['guestPasswd'],dbConfig['portNr'],dbConfig['socketFileLocation'])


#write clad file
bossConfig.write(bossStr)
bossConfig.close()

print
print 'Creating ClarensConfig.clad'
print

bossClarens=open(dbConfig['configDir']+'/ClarensConfig.clad','w')
bossStr="""
# This is the BOSS Clarens database configuration file
# *************Generated by ProdAgent*************

[
# BOSS Clarens database
DB_NAME = "%s";

# Clarens URL
CLARENS_URL = "%s";

# Clarens CERT
CLARENS_CERT = "%s";

# Clarens KEY
CLARENS_KEY = "%s";

# Clarens PROXY
CLARENS_PROXY = "%s";

# Host where the MySQL server is running
DB_HOST = "%s";
DB_DOMAIN = "%s";

# Default BOSS MySQL user and password
DB_USER = "%s";
DB_USER_PW = "%s";

# Guest BOSS MySQL user and password
DB_GUEST = "%s";
DB_GUEST_PW = "%s";

# MySQL table type
TABLE_TYPE = "";

# MySQL port
DB_PORT = %s;

# MySQL socket
DB_SOCKET = "%s";

# MySQL client flag
DB_CLIENT_FLAG = 0;
]
""" %(dbName,dbConfig['clarensUrl'],dbConfig['clarensCert'],dbConfig['clarensKey'],dbConfig['clarensProxy'],dbConfig['host'],dbConfig['domain'],dbConfig['user'],dbConfig['passwd'],dbConfig['guestUser'],dbConfig['guestPasswd'],dbConfig['portNr'],dbConfig['socketFileLocation'])

bossClarens.write(bossStr)
bossClarens.close()

# register the mysql RTMon

try:
   # as for schedulers...
   cmd = "cd "+bossPath+"/BossRTMon/bin/;bossAdmin registerRTMon -name mysql -updatorPath bossrtupdatorMySQL -clientPath bossrtclientMySQL -configPath " + dbConfig['configDir']+ "/MySQLRTConfig.clad -c " + dbConfig['configDir']
   print cmd
   stdin,stdout=os.popen4(cmd)
   # this is for dealing with questions on replacing
   # the scheduler (this might be easier when the Python API of
   # boss is available
   stdin.write('y')
   stdin.close()
   y=str(stdout.read())
   y=str(stdout.read())
   stdout.close()
   if y!='':
      raise
except Exception,ex:
   print('ERROR: '+str(ex)+'  '+str(y)+'\Perhaps this user '+\
         'has not the right privileges for boss or the database?')
      
# now, set up the configuration, you can register
y=''
try:
   print 'bossAdmin configureRTMonDB -name mysql -c ' + dbConfig['configDir']
   stdin,stdout=os.popen4('bossAdmin configureRTMonDB -name mysql -c ' + dbConfig['configDir'])
   lines=stdout.readlines()
   for line in lines:
      if "mysql -u root" in line :
         schemaLocation=line[line.find('MySQL'):]
         break
   y=stdout.read()
   if y!='':
      raise Exception("ERROR",str(y))
except Exception,ex:
   print('*****Ignore this for the moment: '+str(ex[1]))
   print('*****End Ignore')

# add this to the schema to the database
#schemaLocation='MySQLConfig.sql_1'
print "schemaLocation for ",dbName,": ",schemaLocation

installDB(schemaLocation,dbName,dbConfig['socketFileLocation'],dbConfig['portNr'],dbConfig['host'],users,installUser)


# we delete the file boss generated
print('\nDeleting files generated by boss (MySQLConfig.sql*)')
os.popen('rm MySQLConfig.sql*')

# register the CMSSW BOSSjobtype
raw_input("Press any key to continue registering CMSSW program type")

y=''
try:
   if os.path.exists(bossPath+'/Examples/cmsswSchema')==0 :
      raise Exception("WARNING","CMSSW program type not found. Skipping")
   print('Registering cmssw program type')
   cmd = 'cd '+bossPath+'/Examples; bossAdmin registerProgram -name cmssw -schema cmsswSchema -pre cmsswRuntimeprocess -post cmsswRuntimeprocess -runtime cmsswRuntimeprocess -comment "cmssw program" -c ' + dbConfig['configDir']
   stdin,stdout=os.popen4(cmd)
   y=stdout.read()
   if y!='':
      raise Exception("ERROR",str(y))
except Exception,ex:
   print('*****Ignore this for the moment: '+str(ex[1]))
   print('*****End Ignore')


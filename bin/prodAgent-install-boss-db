#!/usr/bin/env python
"""
_prodAgent-install-boss-db_

Installation and configuration script for prod agent boss database.

"""

__revision__ = "$Id: prodAgent-install-boss-db,v 1.2 2006/05/11 19:42:56 fvlingen Exp $"

import getpass
import os
import sys

from ProdAgentCore.Configuration import ProdAgentConfiguration
from ProdAgentDB.Install import adminLogin 
from ProdAgentDB.Install import installDB
from ProdAgentDB.Install import preInstall

bossPath=os.environ.get('BOSSDIR')
if bossPath==None:
   print('BOSSPATH variable is not set')
   sys.exit(1)

path=os.environ.get('PATH')
exists=path.find(bossPath)
if(exists==-1):
   print('BOSSPATH not part of PATH')
   sys.exit(1)

raw_input("""
This script will configure the BOSS database (including the RT MON
database)

Make sure this script is executed by the same user that will 
use boss in the prodagent otherwise boss will not be able to 
find its clad files (press enter to continue)""")

# start the install db process:
valid = ['config=','help']
# check the input
config=preInstall(valid)
# load config file
cfgObject = ProdAgentConfiguration()
cfgObject.loadFromFile(config)
# extract the information
prodAgentConfig = cfgObject.get("BOSS")
dbConfig = cfgObject.get("BOSS") 

#this generates clad files used for other boss commands
y=''
try:
   stdin,stdout=os.popen4('bossConfigFiles --backend mysql')
   y=stdout.read()
   if y!='':
      raise Exception("ERROR",str(y))
except Exception,ex:
   print('*****Ignore this for the moment: '+str(ex[1]))
   print('*****End Ignore')

#overwrite clad files with prod agent defaults.
print
print 'Creating BossConfig.clad'
print

bossConfig=open(dbConfig['configDir']+'/BossConfig.clad','w')

bossStr="""
# This is the BOSS configuration file

# *************Generated by ProdAgent*************
[
# BOSS temporary directory (where files are extracted from DB)
BOSS_TMP_DIR = "%s";

# BOSS update interval
BOSS_MIN_UPD_INT = %s;   # at most one update every BOSS_MIN_UPD_INT sec.
BOSS_MAX_UPD_INT = %s;  # at least one update every BOSS_MAX_UPD_INT sec.

# Maximum retries after post-process finishes before killing RTUpdator
# (waits BOSS_UPD_INTERVAL*BOSS_MAX_RETRY seconds)
BOSS_MAX_RETRY = %s;

# Boss Database Backend
DB_BACKEND = "MySQL";

# Info sent also to Monalisa (if empty not enabled)
ML_URL = "%s";
]
""" % (dbConfig['tmpDir'],dbConfig['minUpdInt'],dbConfig['maxUpdInt'],\
    dbConfig['maxRetry'],dbConfig['monaLisaUrl'])
bossConfig.write(bossStr)
bossConfig.close()

print
print 'Creating MySQLConfig.clad'
print

bossMysql=open(dbConfig['configDir']+'/MySQLConfig.clad','w')
bossStr="""

# This is the BOSS MySQL Database configuration file
# *************Generated by ProdAgent*************

[
# BOSS MySQL database file
DB_NAME = "%s";

# Host where the MySQL server is running
DB_HOST = "%s";
DB_DOMAIN = "%s";

# Default BOSS MySQL user and password
DB_USER = "%s";
DB_USER_PW = "%s";

# Guest BOSS MySQL user and password
DB_GUEST = "%s";
DB_GUEST_PW = "%s";

# MySQL table type
TABLE_TYPE = "";

# MySQL port
DB_PORT = %s;

# MySQL socket
DB_SOCKET = "%s";

# MySQL client flag
DB_CLIENT_FLAG = 0;
]
""" %(dbConfig['dbName'],dbConfig['host'],dbConfig['domain'],dbConfig['user'],dbConfig['passwd'],dbConfig['guestUser'],dbConfig['guestPasswd'],dbConfig['portNr'],dbConfig['socketFileLocation'])
bossMysql.write(bossStr)
bossMysql.close()

# after modifying the clad files we can generate the schema with the boss
# command.

y=''
try:
   stdin,stdout=os.popen4('bossAdmin configureDB')
   y=stdout.read()
   if y!='':
      raise Exception("ERROR",str(y))
except Exception,ex:
   print('*****Ignore this for the moment: '+str(ex[1]))
   print('*****End Ignore')


# once we generate the schema we can install the database
schemaLocation=dbConfig['schemaLocation']
# boss creates the file in the same dir???
schemaLocation='MySQLConfig.sql'
dbName=dbConfig['dbName']

# ask for password (optional)
userName,passwd=adminLogin()

users={dbConfig['user']:dbConfig['passwd'],
       dbConfig['guestUser']:dbConfig['passwd']}

installUser={'userName':userName,
             'passwd':passwd}
# install the database
installDB(schemaLocation,dbName,dbConfig['socketFileLocation'],dbConfig['portNr'],dbConfig['host'],users,installUser)

# clad files and database have been installed. Register schedulers.
# NOTE: if scheduler install script names change we need to change too.
# NOTE: perhaps put this in the config.xml file?

schedulers=['registerBBSScheduler','registerGLITEScheduler', \
            'registerCondorScheduler','registerLSF-NoSharedFS-Scheduler', \
            'registerEDGScheduler','registerLSF-SharedFS-Scheduler', \
            'registerForkScheduler','registerPBSScheduler']

print
print('Registering schedulers:')
print
y=''
for scheduler in schedulers:
    try:
        print('Registering '+scheduler.lstrip('register'))
        cmd='cd '+bossPath+'/BossSched/bin/;./'+scheduler
        stdin,stdout=os.popen4(cmd)
        # this is for dealing with questions on replacing
        # the scheduler (this might be easier when the Python API of
        # boss is available
        stdin.write('y')
        stdin.close()
        y=str(stdout.read())
        y=str(stdout.read())
        stdout.close()
        if y!='':
            raise
    except Exception,ex:
        print('ERROR: '+str(ex)+'  '+str(y)+'\Perhaps this user '+\
            'has not the right privileges for boss or the database?')



list=''
try:
   cmd='boss showSchedulers'
   stdin,stdout=os.popen4(cmd)
   while 1:
       y=stdout.readline()
       if not y:
           stdout.close()
           break
       list+=y
except Exception,ex:
   print('ERROR '+str(ex))


print('The following schedulers where registered:\n'+list)

raw_input("Press any key to continue installing the BOSS RT MON DB")

y=''
try:
   stdin,stdout=os.popen4('bossRTConfigFiles --backend mysql')
   y=stdout.read()
   if y!='':
      raise Exception("ERROR",str(y))
except Exception,ex:
   print('*****Ignore this for the moment: '+str(ex[1]))
   print('*****End Ignore')

bossConfig=open(dbConfig['configDir']+'/MySQLRTConfig.clad','w')
print("\nCreating MySQLRTConfig.clad")

bossStr="""
# This is the BOSS MySQL Database configuration file
#***********Generated by prodagent****************
[
# BOSS MySQL database file
DB_NAME = "%s";

# Host where the MySQL server is running
DB_HOST = "%s";
DB_DOMAIN = "%s";

# Default BOSS MySQL user and password
DB_USER = "%s";
DB_USER_PW = "%s";

# Guest BOSS MySQL user and password
DB_GUEST = "%s";
DB_GUEST_PW = "%s";

# MySQL table type
TABLE_TYPE = "";

# MySQL port
DB_PORT = %s;

# MySQL socket
DB_SOCKET = "%s";

# MySQL client flag
DB_CLIENT_FLAG = 0;

# MySQL timeout in seconds
DB_CONNECT_TIMEOUT = 30;
]
""" %(dbConfig['dbName'],dbConfig['host'],dbConfig['domain'],dbConfig['user'],dbConfig['passwd'],dbConfig['guestUser'],dbConfig['guestPasswd'],dbConfig['portNr'],dbConfig['socketFileLocation'])

#write clad file
bossConfig.write(bossStr)
bossConfig.close()

y=''
try:
   stdin,stdout=os.popen4('bossAdmin configureRTMonDB -name mysql')
   y=stdout.read()
   if y!='':
      raise Exception("ERROR",str(y))
except Exception,ex:
   print('*****Ignore this for the moment: '+str(ex[1]))
   print('*****End Ignore')

# add this to the schema to the database
schemaLocation='MySQLConfig.sql_1'

installDB(schemaLocation,dbName,dbConfig['socketFileLocation'],dbConfig['portNr'],dbConfig['host'],users,installUser,False)


# we delete the file boss generated
print('\nDeleting files generated by boss (MySQLConfig.sql*)')
os.popen('rm MySQLConfig.sql*')

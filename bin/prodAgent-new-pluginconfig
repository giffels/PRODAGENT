#!/usr/bin/env python
"""
_prodAgent-new-pluginconfig_

Generate default plugin configuration files for the components
that have plugins.

"""

import os
import sys
import time

_Timestamp = time.strftime("%d-%M-%Y")

try:
    from ProdAgentCore.Configuration import loadProdAgentConfiguration
    from ProdAgentCore.PluginConfiguration import PluginConfiguration
except ImportError, ex:
    msg = "Unable to import ProdAgent Python modules:\n"
    msg += "There may be a problem with your PYTHONPATH env variable\n"
    print msg
    sys.exit(1)




configFile = os.environ.get("PRODAGENT_CONFIG", None)
if configFile == None:
    msg = "Config file not found\n"
    msg += "$PRODAGENT_CONFIG must be set"
    print msg
    sys.exit(1)

try:
    config = loadProdAgentConfiguration()
except StandardError, ex:
    msg = "Unable to read the configuration file:\n"
    msg += "%s\n" % configFile
    msg += "Error:\n"
    msg += str(ex)
    print msg
    sys.exit(1)


#  //
# // JobCreator plugin
#//

creatorTemplate = {

    #  //
    # // Standard Software setup config
    #//
    "SoftwareSetup": {
    "ScramCommand" : "scramv1",
    "ScramArch" : "slc4_ia32_gcc345",
    "SetupCommand" : "echo \"Setup Command goes here\"",
    },

    #  //
    # // Standard Stage Out settings
    #//
    "StageOut" :{
    "TargetHostName" : None,
    "TargetPathName" : None,
    "TransportMethod" : None,
    "SetupCommand" : None,
    
    },

    #  //
    # // JobTimeout Settings 
    #//
    "JobTimeout" :{
    "UseJobTimeout" : "False",
    "Timeout" :        None,
    "HardKillDelay" :  None,

    },
    #  //
    # // Standard Settings for contacting Dashboard
    #//
    "Dashboard" : {
    "UseDashboard" : "True",
    "DestinationHost" : "cms-pamon.cern.ch",
    "DestinationPort" : "8884",
    "EventDestinationHost" :"lxarda12.cern.ch",
    "EventDestinationPort" : "8884",
    
    },

    #  //
    # // Standard settings for JobMon server
    #//
    "JobMon" : {
    "UseJobMon" : "False",
    "ServerURL" : None,
    },
    
    #  //
    # // Standard Settings for EventLogger monitoring broadcasts
    #//  to MonALISA
    "EventLogger" : {
    "UseEventLogger" : "False",
    },
    "EventLoggerDestinations" : {
    "cmsosgce.fnal.gov" : "58884",
    "cmsitbsrv01.fnal.gov" : "58884",
    },
    
    

    #  //
    # // Software Setup settings
    #//
    "SoftwareSetup": {
    'ScramCommand' : "scramv1",
    'ScramArch' : "slc4_ia32_gcc345",
    'SetupCommand': None,
    },

	"PerformanceMonitor": {
	'UsePerformanceMonitor' : "True",
	},

    }

creatorCfg = config.get("JobCreator", {})
pluginFile = creatorCfg.get('CreatorPluginConfig', None)
if pluginFile:
    pluginFile = os.path.expandvars(pluginFile)

    if os.path.exists(pluginFile):
        print "Plugin Config File Already Exists: %s" % configFile
        backup = "%s.BAK.%s" % (pluginFile, _Timestamp)
        os.system("/bin/cp %s %s" % (pluginFile, backup))
        print "Plugin Config File backed up to:"
        print " ", backup
    
    creatorPluginConfig = PluginConfiguration()
    for key, value in creatorTemplate.items():
        block = creatorPluginConfig.newBlock(key)
        block.update(value)
        
    creatorPluginConfig.writeToFile(pluginFile)
    


#  //
# // JobSubmitter plugin
#//

submitterTemplate = {
    #  //
    # // Submitter Whitelist
    #//  Format: key = host name,
    #  //        value = None (maybe a priority value in future??)
    "SiteWhitelist" : {
    #"cmsosgce.fnal.gov/jobmanager-condor" : None,
    #"cithep90.ultralight.org/jobmanager-condor" : None,
    #"red.unl.edu/jobmanager-pbs" : None,
    #"cmsgrid02.hep.wisc.edu/jobmanager-condor" : None,
    },
    #  //
    # // Submitter Blacklist
    #//  Format: key = host name, value = None
    "SiteBlacklist" : {
    #"twoflower.fnal.gov" : None,
    },
    "Dashboard" : {
    "UseDashboard" : "True",
    "DestinationHost" : "cms-pamon.cern.ch",
    "DestinationPort" : "8884",
    },

    #  //
    # // Standard OSG Config parameters
    #//
    "OSG" : {
    "GlobusScheduler" : None,
    },

    #  //
    # // Standard LCG Config parameters
    #//
    "LCG" : {
    "JDLRequirementsFile" : None,
    "RBconfigVO" : None,
    "RBconfig" : None,
    "RTMon" : "mysql"
    },

    "GLITE" : {
    "JDLRequirementsFile" : None,
    "WMSconfig" : None,
    "Scheduler" : "gliteParam",
    "RTMon" : "mysql"
    },

    #  //
    # // SE to jobmanager map for OSG sites.
    #//  Maps SITECONF se-name from local-stage-out to the jobmanager
    #  //that is required to route merge jobs to that site.
    # //
    #//
    "SENameToJobmanager": {
    "fnal" :"cmsosgce.fnal.gov/jobmanager-condor-opt",
    "Wisconsin" :"cmsgrid02.hep.wisc.edu/jobmanager-condor",
    "Nebraska" :"red.unl.edu/jobmanager-pbs",
    "Caltech" :"cit-gatekeeper.ultralight.org/jobmanager-condor",
    "Purdue" :"grid.physics.purdue.edu/jobmanager-pbs",
    "UCSD" :"osg-gw-2.t2.ucsd.edu/jobmanager-condor",
    "MIT" :"ce01.cmsaf.mit.edu/jobmanager-condor",
    "Florida" :"ufloridapg.phys.ufl.edu/jobmanager-condor",
    },
    
    }

submitterCfg = config.get("JobSubmitter", {})
pluginFile = submitterCfg.get('SubmitterPluginConfig', None)
if pluginFile:
    pluginFile = os.path.expandvars(pluginFile)
    if os.path.exists(pluginFile):
        print "Plugin Config File Already Exists: %s" % configFile
        backup = "%s.BAK.%s" % (pluginFile, _Timestamp)
        os.system("/bin/cp %s %s" % (pluginFile, backup))
        print "Plugin Config File backed up to:"
        print " ", backup

    submitterPluginConfig = PluginConfiguration()
    for key, value in submitterTemplate.items():
        block = submitterPluginConfig.newBlock(key)
        block.update(value)

    submitterPluginConfig.writeToFile(pluginFile)
    
 
 
 #  //
# // ResourceMonitor plugin config
#//

resourceTemplate = {
    
    # LCGAdvanced parameters
    "LCGAdvanced" : {
    	"DumpState" : None,
    	"UseFCR" : "True",
    	"UseSAM" : "True"
    }
    
    #other resource monitor params
    #...
}

resourceCfg = config.get("ResourceMonitor", {})
pluginFile = resourceCfg.get('MonitorPluginConfig', None)
if pluginFile:
    pluginFile = os.path.expandvars(pluginFile)
    if os.path.exists(pluginFile):
        print "Plugin Config File Already Exists: %s" % pluginFile
        backup = "%s.BAK.%s" % (pluginFile, _Timestamp)
        os.system("/bin/cp %s %s" % (pluginFile, backup))
        print "Plugin Config File backed up to:"
        print " ", backup

    resourcePluginConfig = PluginConfiguration()
    for key, value in resourceTemplate.items():
        block = resourcePluginConfig.newBlock(key)
        block.update(value)

    resourcePluginConfig.writeToFile(pluginFile)
    
    
   
    
   

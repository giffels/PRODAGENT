#!/usr/bin/env python
"""
prodAgent-edit-config

Command line tool for tweaking parameters in the config file.

"""

import os
import sys
import getopt


try:
    from ProdAgentCore.Configuration import loadProdAgentConfiguration
except ImportError, ex:
    msg = "Unable to import ProdAgent Python modules:\n"
    msg += "There may be a problem with your PYTHONPATH env variable\n"
    print msg
    sys.exit(1)


def usage():
    print "Usage: prodAgent-edit-config --component=<comp>"
    print "                             --parameter=<setting>"
    print "                             --value=<value>"
    print " Where component is the name of the component being configured"
    print " setting is the name of the parameter and value is the new value"
    print " $PRODAGENT_CONFIG must be set to the config to edit"
    print ""
    print " Eg: prodAgent-edit-config --component=ProdAgentDB "
    print "                           --parameter=host"
    print "                           --value=localhost"
    print ""
    


configFile = os.environ.get("PRODAGENT_CONFIG", None)
if configFile == None:
    msg = "Config file not found\n"
    msg += "$PRODAGENT_CONFIG must be set"
    print msg
    sys.exit(1)

try:
    config = loadProdAgentConfiguration()
except StandardError, ex:
    msg = "Unable to read the configuration file:\n"
    msg += "%s\n" % configFile
    msg += "Error:\n"
    msg += str(ex)
    print msg
    sys.exit(1)

valid = ['component=', "parameter=", "value="]
try:
    opts, args = getopt.getopt(sys.argv[1:], "", valid)
except getopt.GetoptError, ex:
    print str(ex)
    usage()
    sys.exit(1)


component = None
parameter = None
value = None
for opt, arg in opts:
    if opt == "--component":
        component = arg
    if opt == "--parameter":
        parameter = arg

    if opt == "--value":
        value = arg

if component == None:
    print "Error: --component not provided"
    usage()
    sys.exit(1)

if parameter == None:
    print "Error: --parameter not provided"
    usage()
    sys.exit(1)

if parameter == "ComponentDir":
    print "Error: ComponentDir is generated automatically and should not be"
    print "set by prodAgent-edit-config"
    sys.exit(1)
    

if value == None:
    print "Error: --value not provided"
    usage()
    sys.exit(1)

cfgBlock = config.getConfig(component)
if cfgBlock == None:
    print "Error: Component %s not found in configuration" % component
    print "Cannot edit parameter for non existent config entry"
    sys.exit(1)

if not cfgBlock.has_key(parameter):
    print "Error: Component %s has no parameter named %s " % (
        component, parameter,
        )
    print "Cannot edit non existent parameter"
    sys.exit(1)

cfgBlock[parameter] = value

def generateCompDirs():
    """
    _generateCompDirs_

    Regenerate all the settings for ComponentDir

    """
    prodAgentBlock = config.getConfig("ProdAgent")
    prodAgentWork = prodAgentBlock['ProdAgentWorkDir']
    for comp in config.components:
        compBlock = config.getConfig(comp)
        compBlock['ComponentDir'] = os.path.join(prodAgentWork, comp)
    return

#  //
# // If the parameter being set is ProdAgent.ProdAgentWorkDir, propagate
#//  that change to all ComponentDir settings
if (component == "ProdAgent") and (parameter == "ProdAgentWorkDir"):
    generateCompDirs()


config.saveToFile(configFile)


    
    

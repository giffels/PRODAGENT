#!/usr/bin/env python
"""
_prodAgentd_

Startup/Shutdown tool for prodAgent components.

"""

import os
import sys
import getopt
import inspect
import time

from ProdAgentCore.Configuration import ProdAgentConfiguration
from ProdAgentCore.DaemonDetails import DaemonDetails


def usage():
    usage = \
    """
    Usage: prodAgentd <--start|--shutdown|--statuts> <opts>
           You must provide either --start OR --shutdown OR --status
           You can optionally specify the ProdAgent Config file with
           --config otherwise it will expect to get the config file from
           the $PRODAGENT_CONFIG environment variable

           --start starts up the prodAgent components
           --shutdown shutsdown the prodAgent components
           --status prints the status of the prodAgent components
    """
    print usage

    
valid = ['config=', 'start', 'shutdown', 'status']

try:
    opts, args = getopt.getopt(sys.argv[1:], "", valid)
except getopt.GetoptError, ex:
    print str(ex)
    usage()
    sys.exit(1)

config = None
command = None


for opt, arg in opts:
    if opt == "--config":
        config = arg
    if opt == "--start":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "start"
    if opt == "--shutdown":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "shutdown"
    if opt == "--status":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "status"

if config == None:            
    config = os.environ.get("PRODAGENT_CONFIG", None)
    if config == None:
        msg = "No ProdAgent Config file provided\n"
        msg += "either set $PRODAGENT_CONFIG variable\n"
        msg += "or provide the --config option"


cfgObject = ProdAgentConfiguration()
cfgObject.loadFromFile(config)


prodAgentConfig = cfgObject.get("ProdAgent")
dbConfig = cfgObject.get("ProdAgentDB") # TODO: test DB connection
workingDir = prodAgentConfig['ProdAgentWorkDir'] # TODO: check Dirs exist
workingDir = os.path.expandvars(workingDir)
components = cfgObject.listComponents()


def startup():
    """
    _startup_

    Start up the component daemons

    """
    for component in components:
        modRef = __import__(component, globals(), locals(), [])
        srcFile = inspect.getsourcefile(modRef)
        srcDir = os.path.dirname(srcFile)
        startup = os.path.join(srcDir, "Startup.py")
        if not os.path.exists(startup):
            msg = "Error starting component: %s\n" % component
            msg += "Startup file is not found:\n"
            msg += "  %s \n" % startup
            print msg
            sys.exit(1)

                
        compCfg = cfgObject.getConfig(component)
        compDir = compCfg['ComponentDir']
        compDir = os.path.expandvars(compDir)
        if not os.path.exists(compDir):
            print "Creating Component Dir:", compDir
            os.makedirs(compDir)
        daemonXml = os.path.join(compDir, "Daemon.xml")
        if os.path.exists(daemonXml):
            daemon = DaemonDetails(daemonXml)
            if daemon.isAlive():
                print "Error: Component Daemon is alive for", component
                print "Running as:", daemon['ProcessID']
                print "You must shut it down before starting it"
                sys.exit(1)
        

        print "Starting Component %s:" % component
        print "With: ", startup
        os.system("python %s " % startup)
        time.sleep(1)
        daemon = DaemonDetails(daemonXml)
        if not daemon.isAlive():
            print "Error: Component %s Did not start properly..." % component
            sys.exit(1)

        
    sys.exit(0)
    
        
def shutdown():
    """
    _shutdown_

    Shutdown the component daemons

    """
    for component in components:
        compCfg = cfgObject.getConfig(component)
        compDir = compCfg['ComponentDir']
        compDir = os.path.expandvars(compDir)
        daemonXml = os.path.join(compDir, "Daemon.xml")
        if not os.path.exists(daemonXml):
            print "Cannot find Daemon.xml for component:", component
            print "Unable to shut it down"
            continue
        daemon = DaemonDetails(daemonXml)
        if not daemon.isAlive():
            print "Component %s with process id %s is not running" % (
                component, daemon['ProcessID'],
                )
            continue
        daemon.kill()
    return


def status():
    """
    _status_

    Print status of all components in config file

    """
    for component in components:
        compCfg = cfgObject.getConfig(component)
        compDir = compCfg['ComponentDir']
        compDir = os.path.expandvars(compDir)
        daemonXml = os.path.join(compDir, "Daemon.xml")
        if not os.path.exists(daemonXml):
            print "Component:%s Not Running" % component
            continue
        daemon = DaemonDetails(daemonXml)
        if not daemon.isAlive():
            print "Component:%s Not Running" % component
        else:
            print "Component:%s Running:%s" % (component, daemon['ProcessID'])

    sys.exit(0)
        
if command == "start":
    startup()

elif command == "shutdown":
    shutdown()

elif command == "status":
    status()
    
    


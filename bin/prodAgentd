#!/usr/bin/env python
"""
_prodAgentd_

Startup/Shutdown tool for prodAgent components.

"""

import os
import sys
import getopt
import inspect
import time
import popen2

from ProdAgentCore.Configuration import ProdAgentConfiguration
from ProdAgentCore.DaemonDetails import DaemonDetails


def usage():
    usage = \
    """
    Usage: prodAgentd <--start|--shutdown|--statuts> <opts>
           You must provide either --start OR --shutdown OR --status
           You can optionally specify the ProdAgent Config file with
           --config otherwise it will expect to get the config file from
           the $PRODAGENT_CONFIG environment variable

           --start starts up the prodAgent components
           --shutdown shutsdown the prodAgent components
           --status prints the status of the prodAgent components
    """
    print usage

    
valid = ['config=', 'start', 'shutdown', 'status', 'restart',
         'components=', 'cleanup-logs', 'cleanup-all', 'reset-db']

try:
    opts, args = getopt.getopt(sys.argv[1:], "", valid)
except getopt.GetoptError, ex:
    print str(ex)
    usage()
    sys.exit(1)

config = None
command = None
doLogCleanup = False
doDirCleanup = False
componentsList = None


for opt, arg in opts:
    if opt == "--config":
        config = arg
    if opt == "--start":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "start"
    if opt == "--shutdown":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "shutdown"
    if opt == "--status":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "status"
    if opt == "--restart":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "restart"
    if opt == "--reset-db":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "reset"
    if opt == "--cleanup-logs":
        doLogCleanup = True
    if opt == "--cleanup-all":
        doDirCleanup = True
    if opt == "--components":
        compList = arg.split(',')
        componentsList = []
        for item in compList:
            if item.strip == "":
                continue
            componentsList.append(item)
            

if config == None:            
    config = os.environ.get("PRODAGENT_CONFIG", None)
    if config == None:
        msg = "No ProdAgent Config file provided\n"
        msg += "either set $PRODAGENT_CONFIG variable\n"
        msg += "or provide the --config option"


cfgObject = ProdAgentConfiguration()
cfgObject.loadFromFile(config)


prodAgentConfig = cfgObject.get("ProdAgent")
dbConfig = cfgObject.get("ProdAgentDB") # TODO: test DB connection
workingDir = prodAgentConfig['ProdAgentWorkDir'] # TODO: check Dirs exist
workingDir = os.path.expandvars(workingDir)

if componentsList != None:
    msg = "Components List Specified:\n"
    msg += str(componentsList).replace('\'', '')
    print msg
    components = componentsList
else:    
    components = cfgObject.listComponents()


def connectionTest():
    """
    _connectionTest_

    Create a DB Connection instance to test the mysqldb connection specified
    in the config file.

    """
    from ProdAgentDB.Connect import connect

    try:
        conn = connect()
    except Exception, ex:
        msg = "Unable to make connection to ProdAgentDB using ProdAgent DB\n"
        msg += "Parameters provided in %s\n" % config
        msg += str(ex)
        print msg
        return False
    return True

def startup():
    """
    _startup_

    Start up the component daemons

    """
    if not connectionTest():
        msg = "Cannot connect to ProdAgent DB...\n"
        msg += "exiting...\n"
        print msg
        sys.exit(1)
    for component in components:
        modRef = __import__(component, globals(), locals(), [])
        srcFile = inspect.getsourcefile(modRef)
        srcDir = os.path.dirname(srcFile)
        startup = os.path.join(srcDir, "Startup.py")
        if not os.path.exists(startup):
            msg = "Error starting component: %s\n" % component
            msg += "Startup file is not found:\n"
            msg += "  %s \n" % startup
            print msg
            sys.exit(1)

                
        compCfg = cfgObject.getConfig(component)
        compDir = compCfg['ComponentDir']
        compDir = os.path.expandvars(compDir)
        if component=="ProdMgrInterface":
            offset=cfgObject.getConfig('ProdAgent')['ProdAgentRunOffset']
            msg=""" IF YOUR NOT USING THE PRODMGRINTERFACE
IGNORE THIS MESSAGE AND WAIT 15 seconds. 

You are activating the ProdMgrInterface. This means you can 
work simulataneously on one request with multiple ProdAgents. 
If that is the case it is imperative that you have a global unique 
offset number.  Currently your offset is %s. If that is ok do 
not do anything.  If it is not what you intended shut down the 
ProdMgrInterface and configure the offset properly. 

This message dissappears in 15 seconds. """ %(offset)
            print(msg)
            time.sleep(15) 
        if not os.path.exists(compDir):
            print "Creating Component Dir:", compDir
            os.makedirs(compDir)
        daemonXml = os.path.join(compDir, "Daemon.xml")
        if os.path.exists(daemonXml):
            daemon = DaemonDetails(daemonXml)
            if daemon.isAlive():
                print "Error: Component Daemon is alive for", component
                print "Running as:", daemon['ProcessID']
                print "You must shut it down before starting it"
                sys.exit(1)
        

        print "Starting Component %s:" % component
        print "With: ", startup
        os.system("python %s " % startup)
        time.sleep(1)
        daemon = DaemonDetails(daemonXml)
        if not daemon.isAlive():
            print "Error: Component %s Did not start properly..." % component
            sys.exit(1)

    return
    
        
def shutdown():
    """
    _shutdown_

    Shutdown the component daemons

    If cleanup-logs option is specified, wipe out the component logs
    If cleanup-all option is specified, wipe out all component dir
    content and purge the ProdAgentDB

    """
    for component in components:
        compCfg = cfgObject.getConfig(component)
        compDir = compCfg['ComponentDir']
        compDir = os.path.expandvars(compDir)
        daemonXml = os.path.join(compDir, "Daemon.xml")
        if not os.path.exists(daemonXml):
            print "Cannot find Daemon.xml for component:", component
            print "Unable to shut it down"
            continue
        daemon = DaemonDetails(daemonXml)
        if not daemon.isAlive():
            print "Component %s with process id %s is not running" % (
                component, daemon['ProcessID'],
                )
            continue
        daemon.kill()
        if doLogCleanup:
            #  //
            # // Log Cleanup
            #//
            msg = "Removing %s/ComponentLog" % compDir
            print msg
            try:
                os.remove("%s/ComponentLog" % compDir)
            except StandardError, ex:
                msg = "Unable to cleanup Component Log: "
                msg += "%s/ComponentLog\n" % compDir
                msg += str(ex)
                
        if doDirCleanup:
            #  //
            # // Cleanout everything in ComponentDir
            #//  for this component
            msg = "Removing %s/*\n" % compDir
            print msg
            pop = popen2.Popen4("/bin/rm -rf %s/*" % compDir)
            exitCode = pop.poll()
            while pop.poll() == -1:
                exitCode = pop.poll()
            output = pop.fromchild.read()
            if exitCode:
                msg = "Failed to clean up dir: %s\n" % compDir
                msg += output
                print msg

   
    return


def status():
    """
    _status_

    Print status of all components in config file

    """
    for component in components:
        compCfg = cfgObject.getConfig(component)
        compDir = compCfg['ComponentDir']
        compDir = os.path.expandvars(compDir)
        daemonXml = os.path.join(compDir, "Daemon.xml")
        if not os.path.exists(daemonXml):
            print "Component:%s Not Running" % component
            continue
        daemon = DaemonDetails(daemonXml)
        if not daemon.isAlive():
            print "Component:%s Not Running" % component
        else:
            print "Component:%s Running:%s" % (component, daemon['ProcessID'])

    sys.exit(0)

def restart():
    """
    _restart_

    do a shutdown and startup again

    """
    shutdown()
    startup()
    return

def resetdb():
    """
    _resetdb_

    Purge the ProdAgentDB

    """
    print "Removing all Pending messages and JobState info from ProdAgentDB"
    from AdminControl.AdminControlInterface import AdminControlInterface
    intf = AdminControlInterface()
    intf.purgeProdAgentDB()
    return
        
if command == "start":
    startup()
    sys.exit(0)

elif command == "shutdown":
    shutdown()
    sys.exit(0)
elif command == "status":
    status()
    sys.exit(0)
    
elif command == "restart":
    restart()
    sys.exit(0)
elif command == "reset":
    resetdb()
    sys.exit(0)
